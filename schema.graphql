type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EIP712DomainChanged @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type DecodingFailed @entity(immutable: true) {
  id: Bytes!
  requestId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ModelUpdated @entity(immutable: true) {
  id: Bytes!
  modelId: BigInt! # uint256
  priceUSD: BigInt! # uint256
  associatedAddress: Bytes! # address
  royaltyFee: BigInt! # uint256
  duration: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NFTListed @entity(immutable: true) {
  id: Bytes!
  listingId: BigInt! # uint256
  tokenId: BigInt! # uint256
  price: BigInt! # uint256
  seller: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NFTSold @entity(immutable: true) {
  id: Bytes!
  listingId: BigInt! # uint256
  tokenId: BigInt! # uint256
  price: BigInt! # uint256
  buyer: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NFTMarketplaceAutomationLtOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequestFulfilled @entity(immutable: true) {
  id: Bytes!
  NFTMarketplaceAutomationLt_id: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequestSent @entity(immutable: true) {
  id: Bytes!
  NFTMarketplaceAutomationLt_id: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Response @entity(immutable: true) {
  id: Bytes!
  requestId: Bytes! # bytes32
  response: Bytes! # bytes
  err: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ResponseError @entity(immutable: true) {
  id: Bytes!
  requestId: Bytes! # bytes32
  err: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoyaltiesPaid @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  beneficiary: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubscriptionPaused @entity(immutable: true) {
  id: Bytes!
  subscriptionId: BigInt! # uint256
  pausedBy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubscriptionPurchased @entity(immutable: true) {
  id: Bytes!
  buyer: Bytes! # address
  modelId: BigInt! # uint256
  subscriptionId: BigInt! # uint256
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type luckySubcriberSuccess @entity(immutable: true) {
  id: Bytes!
  luckySubcriber: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
